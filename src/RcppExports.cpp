// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// checkFun
double checkFun(const arma::vec& residuals, double tau);
RcppExport SEXP _quantGA_checkFun(SEXP residualsSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(checkFun(residuals, tau));
    return rcpp_result_gen;
END_RCPP
}
// objFun
double objFun(const arma::vec& beta, const arma::mat& X, const arma::vec& y, double tau);
RcppExport SEXP _quantGA_objFun(SEXP betaSEXP, SEXP XSEXP, SEXP ySEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(objFun(beta, X, y, tau));
    return rcpp_result_gen;
END_RCPP
}
// popFitness
arma::vec popFitness(const arma::mat& pop, const arma::mat& X, const arma::vec& y, double tau);
RcppExport SEXP _quantGA_popFitness(SEXP popSEXP, SEXP XSEXP, SEXP ySEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pop(popSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(popFitness(pop, X, y, tau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quantGA_checkFun", (DL_FUNC) &_quantGA_checkFun, 2},
    {"_quantGA_objFun", (DL_FUNC) &_quantGA_objFun, 4},
    {"_quantGA_popFitness", (DL_FUNC) &_quantGA_popFitness, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_quantGA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
